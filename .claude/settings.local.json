{
  "permissions": {
    "allow": [
      "Bash(BGB_LIMIT_FILES=2 .venv/bin/python -m src train configs/smoke_test.yaml)",
      "Bash(export BGB_LIMIT_FILES=2)",
      "Bash(.venv/bin/python:*)",
      "Bash(export BGB_LIMIT_FILES=1 PYTHONFAULTHANDLER=1)",
      "Bash(export PYTHONPATH=/home/jj/proj/brain-go-brr-v2)",
      "Bash(strace -e trace=open,openat,read timeout 5 .venv/bin/python -m src train configs/smoke_test.yaml)",
      "Bash(uv pip compile:*)",
      "Bash(tmux ls:*)",
      "Bash(tmux kill-session:*)",
      "Bash(tmux new-session:*)",
      "Bash(tmux new:*)",
      "Bash(tmux capture-pane:*)",
      "Bash(cat:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(tree:*)",
      "WebSearch",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(xargs ls:*)",
      "Bash(make:*)",
      "Bash(export BGB_LIMIT_FILES=1)",
      "Bash(timeout 10 python:*)",
      "Bash(git branch:*)",
      "Bash(modal:*)",
      "Bash(pip install:*)",
      "WebFetch(domain:modal.com)",
      "Bash(xargs:*)",
      "Bash(while read -r link)",
      "Bash(do [ -f \"$link\" ])",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(git fetch:*)",
      "Read(//home/jj/**)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Read(//mnt/**)",
      "Bash(aws s3:*)",
      "Bash(aws configure:*)",
      "Bash(curl:*)",
      "Bash(unzip:*)",
      "Bash(sudo:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(aws configure set:*)",
      "Bash(strace:*)",
      "Bash(tmux send-keys:*)",
      "Bash(if [ -f .coverage ])",
      "Bash(then coverage report --skip-empty)",
      "Bash(else echo \"No coverage report found\")",
      "Bash(fi)",
      "Bash(dmesg:*)",
      "Bash(awk:*)",
      "Bash(timeout:*)",
      "Bash(env)",
      "Bash(git pull:*)",
      "Bash(coverage report:*)",
      "Bash(tmux list-sessions:*)",
      "Bash(pytest:*)",
      "Bash(export PYTHONFAULTHANDLER=1)",
      "Bash(pkill:*)",
      "Bash(grep:*)",
      "Bash(export BGB_LIMIT_FILES=2 PYTHONFAULTHANDLER=1)",
      "Bash(ruff check:*)",
      "Bash(.venv/bin/pytest tests/unit/cli/test_cli_commands.py::TestCLIEvaluateCommand::test_evaluate_with_json_output -xvs)",
      "Bash(.venv/bin/pytest tests/clinical/test_channel_order.py::TestChannelOrdering::test_channel_synonyms_mapping -xvs)",
      "Bash(.venv/bin/pytest -n auto -m \"not serial\" -q)",
      "Bash(.venv/bin/pytest tests/unit/models/test_mamba.py::TestBiMamba2::test_gradient_flow -xvs)",
      "Bash(for file in tests/unit/models/test_decoder.py tests/unit/models/test_mamba.py tests/unit/models/test_rescnn.py tests/unit/models/test_unet.py tests/integration/test_model_assembly.py)",
      "Bash(do)",
      "Bash(.venv/bin/pytest -n auto -m \"not serial\" --co -q)",
      "Bash(.venv/bin/pytest -m serial --co -q)",
      "Bash(.venv/bin/pytest tests/integration/test_model_assembly.py::TestSeizureDetector::test_output_range -xvs)",
      "Bash(for test in test_memory_efficiency test_dropout_effect test_single_epoch)",
      "Bash(do grep -l \"def $test\" tests/unit/**/*.py)",
      "Bash(while read file)",
      "Read(//tmp/**)",
      "Bash(.venv/bin/pytest -xvs tests/integration/test_model_assembly.py::TestSeizureDetector::test_output_range)",
      "Bash(.venv/bin/pytest --co -q -m serial tests/integration/test_model_assembly.py)",
      "Bash(.venv/bin/pytest --co -q -m \"not serial\" tests/integration/test_model_assembly.py)",
      "Bash(lsof:*)",
      "Bash(.venv/bin/pytest --collect-only -q)",
      "Bash(.venv/bin/pytest --markers)"
    ],
    "deny": [],
    "ask": []
  }
}